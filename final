

//day-2
//learn  about fs and os 
let fs=require('fs');
let os=require('os');

let user=os.userInfo();
console.log(user.username);

fs.appendFile('greeting.txt','hi'+user.username+'!\n',()=>{
    console.log('file is created');
});


// import file  from other place
const notes=require('./notes.js')

//initialize of lodash
var _=require('lodash');


console.log("server page is loaded")

let age=notes.age;

let res=notes.add(12,age);
console.log(age);
console.log(res);

//use of lodash
var data=["person","person",2,2,1,2,1,'name','name'];
//here we use lodash to find unique element in array
var filter=_.uniq(data);
console.log(filter);

//---------------------------------------------------------------------------------

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>day-3<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
const jsonString='{"name":"john","age":39,"city":"new york"}';//this is jsonstring
const jsonObject=JSON.parse(jsonString);//convert json string to object

console.log(jsonObject.name);//john


//convert object to json

const objecttoconvert={
    name:"alice",
    age:25
};

const json =JSON.stringify(objecttoconvert);
console.log(json);


// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DAY 4<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
const express = require('express')
const app = express()
app.get('/', function (req, res) {
  res.send('welcome to my hotel how can i help you?,we have list menu')
})
// get method srf order lakr de skta hai
app.get('/chicken',(req,res)=>{
  res.send('sure sir i would love to serve chicken')
})
app.get('/idli',(req,res)=>{

  let customized_idli={
    name:'rava idli',
    size:'10 cm diameter',
    is_sambhar:true,
    is_chutney:false

  }
  res.send(customized_idli)
  //res.send('welcome to south india and would love to serve idli')
})


app.post('/items',(req,res)=>{
  console.log('data is saved bhai..')
})

// for checking of server live hai ki nhi we use a function inside listen 
//to check listening
app.listen(3000,()=>
{
  console.log('listening on port 3000')
})

//server ko end krna haai aapko toh terminal mein jaker ctrl +c kr do
// for zinda krne ke liye nodemon server.js 

//////////////////////////////////////////////////////////////////////////////////////////

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>DAY5<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

//                                 db.js mongo setup
const mongoose=require('mongoose')


//define mongodb connection url
const mongoURL= 'mongodb://localhost:27017/hotels'


//setup connection of db
mongoose.connect (mongoURL,{
    useNewUrlParser:true,
    useUnifiedTopology:true
}) 

//set up the default cnnection 
//mongoose maintains a defaukt connection object representing the mongoDB connection

const db=mongoose.connection;

//define event listener

db.on('connected',()=>{
   console.log('connected to mongodb server');
});
db.on('err',(err)=>{
    console.log('mongodb connection error');
 });
 db.on('disconnected',()=>{
    console.log('mongodb disconnected');
 });

 //export the database connection
 mongoURL.exports=db;


 //                                             person.js
 const mongoose=require('mongoose')


 // define the persons schema

 const personschema=new mongoose.Schema({
      name:{
        type:String,
        required:true
      },
      age:{
        type:Number
      },
     work:{
        type:String,
        enum:['chef','waiter','manager'],
        required:true
       },
       mobile:
       {
        type:String,
        required:true
       },
       email:{
        type:String,
        required:true,
        unique:true
       },
       address:{
        type:String

       },
       salary:{
           type:Number,
           required:true
       }

 });

 //create person model

 const person=mongoose.model('person',personschema);

 module.exports=person;

 //                                menu item schema
 const mongoose=require('mongoose');


const menuitemschema=new mongoose.Schema({
    name:{
        type:String,
        required:true
    },
    price:{
        type:Number,
        required:true
    },
    taste:{
        type:String,
        enum:['sweet','spicy','sour'],
        required:true
    },
    is_drink:{
        type:Boolean,
        default:false

    },

    ingredients:{
        type:[String],
        default:[]

    },
    num_sales:{
        type:Number,
        default:0

    }
})

const menuitem=mongoose.model('menuitem',menuitemschema);

module.exports=menuitem;

//                               server js code
const express = require('express');
const app = express();
 const db=require('./db');
const person=require('./models/person');
const menuitem=require('./models/menuitem');

const bodyparser=require('body-parser');
app.use(bodyparser.json());

app.get('/', function (req, res) {
  res.send('welcome to my hotel how can i help you?,we have list menu')
})



//POST ROUTE  TO ADD a PERSON
// get method srf order lakr de skta hai
app.post('/person',async(req,res)=>{
try{
  const data=req.body//assuming the request  body contains the person data

  // create a new person document using the mongoose model
 const newperson=new  person(data);

  //save the new person to the database
  const response=await newperson.save();
  console.log('data saved');
  res.status(200).json(response);

}
catch(err)
{
  console.log(err);
  res.status(500).json({error:'internal server erro'})
}
})


//get method to get the person

app.get('/person',async(req,res)=>{
  try{
     const data=await person.find();
     console.log('data fetch');
res.status(200).json(data);
  }catch(err){
    console.log(err);
    res.status(500).json({error:'internal server erro'})
  }
})



// similary u can write get and post methods for  menuitem (:

//POST Method to add a menu item
app.post('/menu',async(req,res)=>{
  try{
    const data=req.body;
    const newmenu=new menuitem(data);
    const response=await newmenu.save();
    console.log('data saved');
    res.status(200).json(response);
  }
  catch(err){
    console.log(err);
    res.status(500).json({error:'Internal server Error'});
  }
})


// get method to get thr mrnu item

app.get('/menu',async(req,res)=>{
  try{
    const data=await menuitem.find();
    console.log('data fetched');
    res.status(200).json(data);
  }catch(err)
  {
      console.log(err);
      res.status(500).json({error:'Internal Server Error'});
  }
})

// for checking of server live hai ki nhi we use a function inside listen 
//to check listening
app.listen(3000,()=>
{
  console.log('listening on port 3000')
})




//server ko end krna haai aapko toh terminal mein jaker ctrl +c kr do
// for zinda krne ke liye nodemon server.js 



///   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DAY 6 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
